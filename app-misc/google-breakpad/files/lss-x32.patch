https://codereview.chromium.org/12181007

--- src/third_party/lss/linux_syscall_support.h
+++ src/third_party/lss/linux_syscall_support.h
@@ -103,6 +103,7 @@ extern "C" {
 #include <signal.h>
 #include <stdarg.h>
 #include <stddef.h>
+#include <stdint.h>
 #include <string.h>
 #include <sys/ptrace.h>
 #include <sys/resource.h>
@@ -1753,6 +1753,15 @@ struct kernel_statfs {
       return res;
     }
   #elif defined(__x86_64__)
+    /* x32 has 32bit longs, but the syscall interface is 64bit */
+    #ifdef __ILP32__
+    #define LSS_SC_ARG(a) (sizeof(a) == 8 ? \
+                           (unsigned long long)(a) : \
+                           (unsigned long long)(uintptr_t)(a))
+    #else
+    #define LSS_SC_ARG(a) (long)(a)
+    #endif
+
     /* There are no known problems with any of the _syscallX() macros
      * currently shipping for x86_64, but we still need to be able to define
      * our own version so that we can override the location of the errno
@@ -1793,7 +1800,7 @@ struct kernel_statfs {
     #endif
     #undef  LSS_BODY
     #define LSS_BODY(type,name, ...)                                          \
-          long __res;                                                         \
+          long long __res;                                                    \
           __asm__ __volatile__(LSS_ENTRYPOINT                                 \
             : "=a" (__res) : "0" (__NR_##name),                               \
             ##__VA_ARGS__ : "r11", "rcx", "memory");                          \
@@ -1806,18 +1813,18 @@ struct kernel_statfs {
     #undef _syscall1
     #define _syscall1(type,name,type1,arg1)                                   \
       type LSS_NAME(name)(type1 arg1) {                                       \
-        LSS_BODY(type, name, "D" ((long)(arg1)));                             \
+        LSS_BODY(type, name, "D" (LSS_SC_ARG(arg1)));                         \
       }
     #undef _syscall2
     #define _syscall2(type,name,type1,arg1,type2,arg2)                        \
       type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
-        LSS_BODY(type, name, "D" ((long)(arg1)), "S" ((long)(arg2)));         \
+        LSS_BODY(type, name, "D" (LSS_SC_ARG(arg1)), "S" (LSS_SC_ARG(arg2))); \
       }
     #undef _syscall3
     #define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)             \
       type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
-        LSS_BODY(type, name, "D" ((long)(arg1)), "S" ((long)(arg2)),          \
-                             "d" ((long)(arg3)));                             \
+        LSS_BODY(type, name, "D" (LSS_SC_ARG(arg1)), "S" (LSS_SC_ARG(arg2)),  \
+                             "d" (LSS_SC_ARG(arg3)));                         \
       }
     #undef _syscall4
     #define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)  \
@@ -1825,8 +1832,9 @@ struct kernel_statfs {
           long __res;                                                         \
           __asm__ __volatile__("movq %5,%%r10;" LSS_ENTRYPOINT :              \
             "=a" (__res) : "0" (__NR_##name),                                 \
-            "D" ((long)(arg1)), "S" ((long)(arg2)), "d" ((long)(arg3)),       \
-            "r" ((long)(arg4)) : "r10", "r11", "rcx", "memory");              \
+            "D" (LSS_SC_ARG(arg1)), "S" (LSS_SC_ARG(arg2)),                   \
+            "d" (LSS_SC_ARG(arg3)), "r" (LSS_SC_ARG(arg4))                    \
+            : "r10", "r11", "rcx", "memory");                                 \
           LSS_RETURN(type, __res);                                            \
       }
     #undef _syscall5
@@ -1837,9 +1845,9 @@ struct kernel_statfs {
           long __res;                                                         \
           __asm__ __volatile__("movq %5,%%r10; movq %6,%%r8;" LSS_ENTRYPOINT :\
             "=a" (__res) : "0" (__NR_##name),                                 \
-            "D" ((long)(arg1)), "S" ((long)(arg2)), "d" ((long)(arg3)),       \
-            "r" ((long)(arg4)), "r" ((long)(arg5)) :                          \
-            "r8", "r10", "r11", "rcx", "memory");                             \
+            "D" (LSS_SC_ARG(arg1)), "S" (LSS_SC_ARG(arg2)),                   \
+            "d" (LSS_SC_ARG(arg3)), "r" (LSS_SC_ARG(arg4)),                   \
+            "r" (LSS_SC_ARG(arg5)) : "r8", "r10", "r11", "rcx", "memory");    \
           LSS_RETURN(type, __res);                                            \
       }
     #undef _syscall6
@@ -1851,9 +1859,10 @@ struct kernel_statfs {
           __asm__ __volatile__("movq %5,%%r10; movq %6,%%r8; movq %7,%%r9;"   \
                                LSS_ENTRYPOINT :                               \
             "=a" (__res) : "0" (__NR_##name),                                 \
-            "D" ((long)(arg1)), "S" ((long)(arg2)), "d" ((long)(arg3)),       \
-            "r" ((long)(arg4)), "r" ((long)(arg5)), "r" ((long)(arg6)) :      \
-            "r8", "r9", "r10", "r11", "rcx", "memory");                       \
+            "D" (LSS_SC_ARG(arg1)), "S" (LSS_SC_ARG(arg2)),                   \
+            "d" (LSS_SC_ARG(arg3)), "r" (LSS_SC_ARG(arg4)),                   \
+            "r" (LSS_SC_ARG(arg5)), "r" (LSS_SC_ARG(arg6)) : "r8", "r9",      \
+            "r10", "r11", "rcx", "memory");                                   \
           LSS_RETURN(type, __res);                                            \
       }
     LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,
@@ -1922,9 +1932,9 @@ struct kernel_statfs {
                            "1:\n"
                              : "=a" (__res)
                              : "0"(-EINVAL), "i"(__NR_clone), "i"(__NR_exit),
-                               "r"(fn), "S"(child_stack), "D"(flags), "r"(arg),
-                               "d"(parent_tidptr), "r"(newtls),
-                               "r"(child_tidptr)
+                               "r"(LSS_SC_ARG(fn)), "S"(LSS_SC_ARG(child_stack)), "D"(LSS_SC_ARG(flags)), "r"(LSS_SC_ARG(arg)),
+                               "d"(LSS_SC_ARG(parent_tidptr)), "r"(LSS_SC_ARG(newtls)),
+                               "r"(LSS_SC_ARG(child_tidptr))
                              : "rsp", "memory", "r8", "r10", "r11", "rcx");
       }
       LSS_RETURN(int, __res);
